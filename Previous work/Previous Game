from random import randint
from time import sleep
from math import sqrt

class player:
    def __init__(self,max_health,health,health_pots,damage,defence,gold,armour,weapon,alive,level,xp,xp_needed,health_pots_price):
        self.max_health=100
        self.health=self.max_health
        self.health_pots=randint(0,5)
        self.damage=5
        self.defence=0
        self.gold=randint(10,30)
        self.armour="No Armour"
        self.weapon="No weapon"
        self.alive=False
        self.level=1
        self.xp=0
        self.xp_needed=xp+(level*50)+100
        self.health_pots_price=randint(10,30)
    
    def commands(self):
        print("use the inventory command for your inventory")
        print("use the fight command to fight an enemy")
        print("use the shop command to buy equipment from a shop")
        print("use the heal command to use health potions")

    def fight(self):
        enemy_array=[["skeleton","zombie","slime","ghost","goblin","rat"],
             [randint(15,45),randint(5,15),randint(5,10),randint(1,5),randint(20,40),randint(1,3)],
             [15,10,5,1,13,2],
             [randint(15,25),randint(3,7),randint(3,5),randint(1,5),randint(12,22),randint(1,3)],
             [randint(45,135),randint(15,45),randint(10,30),randint(5,15),randint(40,120),randint(3,9)]]
        index=randint(0,len(enemy_array[0])-1)
        current_enemy=enemy_array[0][index]
        if self.level<2:
            ehealth=enemy_array[1][index]
            edamage=enemy_array[2][index]
        else:
            ehealth=round(enemy_array[1][index]*sqrt(self.level))
            edamage=round(enemy_array[2][index]*sqrt(self.level))
        fight_reward=enemy_array[3][index]
        xp_reward=enemy_array[4][index]
        print("A",current_enemy,"has appeared")
        print("The ",current_enemy," has ",ehealth," health and does ",edamage," damage")
        while ehealth>0 or self.health>0:
            edamage_done=edamage-(self.defence//5)
            if edamage<=0:
                self.health=self.health
            elif edamage>0:
                sleep(1.5)
                print("You have",self.health,"health and the enemy has",ehealth,"health")
                self.health=self.health-edamage_done
                damage_done=randint((self.damage-5),(self.damage+5))
                ehealth=ehealth-damage_done
            if self.health<=0:
                if self.health_pots>0:
                    self.heal()
                    print("You make one last stand against the",current_enemy)
                else:
                    print("You have died")
                    self.alive=False
                    break
            if ehealth<=0:
                self.gold=self.gold+fight_reward
                self.xp=self.xp+xp_reward
                sleep(1.5)
                print("The",current_enemy,"has been slain")
                print("You have gained ",fight_reward," gold.You now have ",self.gold," gold")
                print("you gained ",xp_reward,"xp.You now have ",self.xp,"xp")
                print("your health is ",self.health)
                self.playing()
    
    def shop(self):
        armour_list=["leather armour","bronze armour","steel armour","obsidian armour","ancient armour"]
        armour_defence=[5,10,20,25,50]
        armour_price=[25,30,50,60,120]
        weapons=["rusty sword","steel sword","knife","rusty knife","gold sword"]
        weapon_dmg=[8,15,11,7,20]
        weapon_price=[25,50,35,15,65]
        action=input("Would you like to see the armour,weapons or potions\n")
        if action.lower()=="armour":
            for i in range(len(armour_list)):
                print(i+1,":",armour_list[i],"Defense:",armour_defence[i],"Price:",armour_price[i],"Gold\n")
                i+=1
            action=int(input("\nWhat armour set would you like to buy?\n"))
            if armour_price[action-1]<=self.gold:
                self.armour=str(armour_list[action-1])
                self.defence=armour_defence[action-1]/2
                self.gold=self.gold-armour_price[action-1]
                print("You now have",self.armour)
                print("Your defence is now",self.defence)
                print("Your gold is now",self.gold)
            else:
                print("You cannot afford this")
        elif action.lower()=="weapons":
            for i in range(len(weapons)):
                print(i+1,":",weapons[i],"Damage:",weapon_dmg[i],"Price:",weapon_price[i],"Gold\n")
                i+=1
            action=int(input("\nWhat weapon would you like to buy?\n"))
            if weapon_price[action-1]<=self.gold:
                self.weapon=str(weapons[action-1])
                self.damage=weapon_dmg[action-1]
                self.gold=self.gold-weapon_price[action-1]
                print("You now have a",self.weapon)
                print("The damage you deal is now",self.damage)
                print("Your gold is now",self.gold)
            else:
                print("You cannot afford this")
        elif action.lower()=="potions":
            print("Health potions are useful as they heal you,they cost",self.health_pots_price)
            amount=int(input("How many health potions would you like to buy.\n"))
            health_pot_actual_price=self.health_pots_price*amount
            if health_pot_actual_price <= self.gold:
                confirm=input("The cost for the health potions is "+str(health_pot_actual_price)+" are you sure you wanna buy them you have "+ str(self.gold)+" gold\n")
                if confirm.lower()=="yes":
                    self.gold=self.gold-health_pot_actual_price
                    self.health_pots=self.health_pots+amount
                    print("You have",self.health_pots,"health potions")
                    print("Your gold is now",self.gold)
                else:
                    print()
            else:
                print("You cannot afford this")
        else:
            self.shop()
    
    def inv(self):
        print("you have",self.gold,"Gold")
        print("The weapon you have equipped is",self.weapon,"which allows you to hit for",self.damage,"hp")
        print("You have",self.armour,"equipped with a defence of",self.defence)
        print("You have",self.health,"health")
        print("You have",self.health_pots,"health potions")
        print("You are level",self.level)

    def heal(self):
        health_pot_value=randint(10,30)
        while self.health_pots>0:
            action=input("Would you like to heal with a health potion\n")
            if action.lower()=="yes":
                self.health=self.health+health_pot_value
                self.health_pots-=1
                if self.health>self.max_health:
                    self.health=self.max_health
                print("you have been healed your health is now",self.health)
            elif action.lower()=="no":
                self.playing()
            else:
                print("Please enter yes or no")
                self.heal()
        if self.health_pots<=0:
            print("It seems that you don't have any health potions,why don't you buy one")
    
    def levelling(self):
        self.xp_needed=self.xp+round((self.level*50)+100)
        self.level=self.level+1
        self.max_health=self.max_health+(self.max_health//100)
        self.health=self.max_health
        self.damage=self.damage+(self.damage//100)
        self.defence=self.defence+(self.defence//100)
        levelup_choice=input("Do you want to boost your Defence,Damage or Health\n")
        if levelup_choice.lower()=="defence":
            self.defence=self.defence+(self.defence//25)
            print("You have chosen to strengthen your battlements against the hordes of enemies to a defence of",self.defence)
        elif levelup_choice.lower()=="damage":
            self.damage=self.damage+(self.damage//25)
            print("You have chosen to stiffen your blows against the hordes of enemies to hit for",self.damage,"damage")
        elif levelup_choice.lower()=="health":
            self.max_health=self.max_health+(self.max_health//25)
            self.health=self.max_health
            print("You have chosen to increase your resolve against the hordes of enemies to a maximum of",self.max_health,"HP")
        else:
            levelup_choice=input("Try again")
        print("You have defeated enough monsters to level up to Level:",self.level)

    def playing(self):
        if self.xp>self.xp_needed:
            self.levelling()
        action=input("\nwhat command do you want to input\n")
        match action:
            case "inv":
                self.inv()
                self.playing()
            case "commands":
                self.commands()
                self.playing()
            case "fight":
                self.fight()
            case "shop":
                self.shop()
                self.playing()
            case "heal":
                self.heal()
                self.playing()
            #case "save":
            #    self.save()
            #    exit()
            case _:
                self.playing()

    def idle(self):
        choice_1=input("Do you want to Play,leave or see the commands\n")
        if choice_1.lower() == 'play':
            print("You awake in a place you don't recognise and have a feeling you aren't safe there.")
            self.playing()
        elif choice_1.lower() == 'commands':
            self.commands()
            self.idle()
        elif choice_1.lower() == 'leave':
            quit()
        else:
            self.idle()

class Knight(player):
    def __init__(self,max_health,health,health_pots,damage,defence,gold,armour,weapon,alive,level,xp,xp_needed,health_pots_price):
        super().__init__(max_health,health,health_pots,damage,defence,gold,armour,weapon,alive,level,xp,xp_needed,health_pots_price)
        self.max_health=max_health
        self.health=health
        self.damage=damage
        self.weapon=weapon
        self.health_pots=health_pots
        self.defence=defence
        self.gold=gold
        self.armour=armour

class Merchant(player):
     def __init__(self,max_health,health,health_pots,damage,defence,gold,armour,weapon,alive,level,xp,xp_needed,health_pots_price):
        super().__init__(max_health,health,health_pots,damage,defence,gold,armour,weapon,alive,level,xp,xp_needed,health_pots_price)
        self.max_health=max_health
        self.health=self.max_health
        self.damage=damage
        self.weapon=weapon
        self.health_pots=health_pots
        self.defence=defence
        self.gold=gold
        self.armour=armour
        self.health_pots_price=health_pots_price
    
class Healer(player):
     def __init__(self,max_health,health,health_pots,damage,defence,gold,armour,weapon,alive,level,xp,xp_needed,health_pots_price):
        super().__init__(max_health,health,health_pots,damage,defence,gold,armour,weapon,alive,level,xp,xp_needed,health_pots_price)
        self.damage=damage
        self.weapon=weapon
        self.health_pots=health_pots
        self.defence=defence
        self.gold=gold
        self.armour=armour
        self.health_pots_price=health_pots_price

choice=input("What class do you want to play? Knight, Merchant, Healer, or the base class\n")

if choice.lower() == "knight":
    character = Knight(150,75,1,15,0,0,"Knightly armour","Sword of the fallen knight",0,5,0,0,0)
    character.idle()

elif choice.lower() == "merchant":
    character = Merchant(75,0,0,0,0,randint(50,150),"Merchant garbs","No weapon",0,3,0,0,randint(5,15))
    character.idle()

elif choice.lower() == "healer":
    character = Healer(0,0,12,1,15,10,"Finery of the Healer clergy","No weapon",0,2,0,0,randint(5,15))
    character.idle()

else:
    character = player(0,0,0,0,0,0,0,0,0,0,0,0,0)
    character.idle()
